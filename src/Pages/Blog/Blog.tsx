// tslint:disable:max-line-length

import * as React from 'react';
import {withRouter} from 'react-router';

import BlogPost from '../../Components/BlogPost';
import Body from '../../Components/Body/Body';
import Footer from '../../Components/Footer/Footer';
import Header from '../../Components/Header/Header';

const blogPostProps = {
    slug: 'handling-complexity-in-lambda-functions',
    uuid: '000',
    tags: ['Serverless', 'Lambda', 'AWS Lambda', 'Middleware', 'Complexity'],
    created: 'Feb 8',
    updated: '',
    language: '',
    readingTime: '5 min',
    title: 'Handling Complexity in Lambda Functions',
    subTitle: '',
    description:
        '<h3>TLDR;</h3>\n<blockquote>\n<p>Middlewares can handle the complexity of your lambdas while isolating business logic and cross-cutting concerns in reusable components that can be modelled by event cycles.</p>\n</blockquote>\n',
    coverImage: 'https://miro.medium.com/max/8512/0*kbFW_oMK_p_EP4jH',
    body:
        '<p>I have had the luck and pleasure of working with lambda functions recently and boy I am having fun! The idea of having an event-driven execution environment is both daring and exciting.</p>\n<p>If you are new to the FaaS world, don\'t worry, the community has already prepared a curated list of reads for you <a href="https://github.com/anaibol/awesome-serverless">here</a> and <a href="https://github.com/pmuens/awesome-serverless">here</a>. Have a browse, drink some coffee.  ‚òï</p>\n<p>As you can see, (because you checked at least one of the links, didn\'t you?) A huge weight has been lifted. We can now develop, run and manage applications without the intricacy of building and maintaining infrastructure. But with new beginnings, new challenges arise. One of such problems and the reason for this blog is function complexity.</p>\n<h2>How complex is too complex?</h2>\n<p>Generally speaking, when writing lambda functions you would organise them into a series of dedicated modules following the <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">single responsibility principle</a>. If you would rather do otherwise, please read this excellent blog comparing <a href="https://hackernoon.com/aws-lambda-should-you-have-few-monolithic-functions-or-many-single-purposed-functions-8c3872d4338f">monolithic vs single purposed functions</a>. Isolating application from business logic reduces code complexity, simplifies reasoning and will help you debug your code more efficiently. Your colleagues and your future self will thank you.</p>\n<p>Take for example some sort of CRUD API, we would like to make sure that a payload is properly formatted before handling any data. The payload validation could emit an error that would communicate its status to the consumer. If the validation was successful it would then move onto executing some business logic. For both scenarios, we would also want to set up some percentile tracing and error logging. While all of these sound great, we have essentially mapped out a request lifecycle with various <a href="https://en.wikipedia.org/wiki/Cross-cutting_concern">cross-cutting concerns</a>:</p>\n<ul>\n<li>Data validation.</li>\n<li>Error detection and correction.</li>\n<li>Logging.</li>\n<li>Monitoring.</li>\n</ul>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*XT2_l9PLKtuZxKNGTYa4Uw.gif" alt="">\n<em>I know what you are thinking‚Ä¶ (gif from giphy)</em></p>\n<p>Following the serverless mantra, we should outsource anything that isn\'t related to the core business, so wouldn\'t it be great if we could just focus on the business logic and outsource these application-specific problems too?\nOf course, this isn\'t a new concept and we have been using it in web frameworks like <a href="http://hapijs.com">hapijs</a> and <a href="https://expressjs.com">express</a> for quite some time now.</p>\n<h2>Lambda Middleware</h2>\n<p>A lambda <a href="https://en.wikipedia.org/wiki/Middleware">middleware</a> is essentially a function that contributes to managing cross-cutting concerns in a consistent manner. It provides a clear separation of application and business logic and outlines an easy to reason configuration cycle. It is the glue that when adopted by everyone in a team becomes the lingua franca that supports and creates features. But do we really need a middleware? Well, look at the current state of your lambdas and ask yourself a few questions:</p>\n<ul>\n<li>What does the code look like?</li>\n<li>Can you envision anyone supporting it in at least 2 years?</li>\n<li>How much business logic expertise do you need? (if specialised then separation is imperative)</li>\n<li>Is logic intertwined and hard to reason about?</li>\n<li>Does the project have a clear path or do you see it going in different directions?</li>\n<li>How will the project look like the day the expert leaves?</li>\n<li>Are best-practices enforced and maintained?</li>\n</ul>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1549761422481/5LOA6J7hr.gif" alt="">\n<em>Jack Nicholson approves. (gif from giphy)</em></p>\n<h2>Enter Lambcycle</h2>\n<p><a href="https://github.com/juliantellez/lambcycle">Lambcycle</a> üêë üõµ is a declarative middleware for lambda functions. It defines a configurable event cycle and allows you to focus on your application\'s logic. It has a &quot;Feature as Plugin&quot; approach, so you can easily create your own plugins or reuse your favourite packages with very little effort.</p>\n<p>In practice there is no such thing as an un-opinionated framework, every idea is an opinion and a way of working with your application. Lambcycle favours configuration over the code and believes that business logic should be as isolated as possible.</p>\n<p><img src="https://cdn-images-1.medium.com/max/1600/1*5I_ZBcvd03ktQpGXuA2kgQ.png" alt="">\n<em>Labmcycle flow chart.</em></p>\n<p>Lambcycle enhances lambda functions with a few extension points (see graph), each of which can be used to interact with the event in a decomposed manner.</p>\n<ul>\n<li>\n<p>The first extension point is <code>Request</code> which occurs immediately after the lambda is called. You can use this step for parsing, validation, etc...\nNote: If you are thinking of auth, please consider a <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">lambda authoriser</a> instead.</p>\n</li>\n<li>\n<p>The <code>Pre Handler</code> extension comes in handy when you need to adapt data to fit an interface. It is also a great place for fetching secrets.</p>\n</li>\n<li>\n<p>The <code>Handler</code>, where your beautiful business logic lives.</p>\n</li>\n<li>\n<p>Next up is the <code>Post Handler</code>, use this extension to validate and/or cache the output of your business logic.</p>\n</li>\n<li>\n<p><code>Error</code> is an implicit extension for logging and tracing.</p>\n</li>\n<li>\n<p>And finally <code>Pre Response</code>, your chance to format a response to the consumer (which could be data or an error).</p>\n</li>\n</ul>\n<h2>Using the middleware</h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Joi <span class="token keyword">from</span> <span class="token string">\'joi\'</span>\n<span class="token keyword">import</span> lambcycle <span class="token keyword">from</span> <span class="token string">\'lambcycle\'</span>\n<span class="token keyword">import</span> joiPlugin <span class="token keyword">from</span> <span class="token string">\'lambcycle/dist/plugin-joi\'</span>\n<span class="token keyword">import</span> bodyParser <span class="token keyword">from</span> <span class="token string">\'lambcycle/dist/plugin-body-parser\'</span>\n<span class="token keyword">import</span> realTimeEventTracker <span class="token keyword">from</span> <span class="token string">\'./bugFreeBizLogic\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">businessLogic</span> <span class="token operator">=</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>error<span class="token punctuation">,</span> data<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">realTimeEventTracker</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> error\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> data<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> schema <span class="token operator">=</span> Joi<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    assetId<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    competition<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    sport<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    tournamentCalendar<span class="token punctuation">:</span> Joi<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">lambcycle</span><span class="token punctuation">(</span>businessLogic<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token function">bodyParser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span> <span class="token string">\'json\'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">joiPlugin</span><span class="token punctuation">(</span>schema<span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> handler\n</code></pre>\n<p>The example above leverages <a href="https://github.com/expressjs/body-parser">express\' body parser</a> and <a href="https://github.com/hapijs/joi">hapi\'s joi validation</a>. We have configured both plugins with a parsing type and a validation schema respectively. By abstracting these two we have rid of complexity and shift the focus to the business logic. Note that a more robust lambda would include error tracing, and response plugins.</p>\n<h2>Crafting a Plugin</h2>\n<p>The possibilities are endless when it comes to plugins! Do you have something in mind? <a href="https://github.com/juliantellez/lambcycle/blob/develop/contributing.md">Contributions</a> are more than welcome ‚ù§Ô∏è</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Sentry <span class="token keyword">from</span> <span class="token string">\'@sentry/node\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> MyAwesomeIntegration <span class="token keyword">from</span> <span class="token string">\'./MyAwesomeIntegration\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">sentryPlugin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    Sentry<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        dsn<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@sentry.io/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>project<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n        integrations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">MyAwesomeIntegration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        config<span class="token punctuation">,</span>\n        plugin<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n            <span class="token function-variable function">onPreResponse</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">handlerWrapper<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                Sentry<span class="token punctuation">.</span><span class="token function">captureMessage</span><span class="token punctuation">(</span><span class="token string">\'some percentile log perhaps?\'</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">onError</span><span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">handlerWrapper<span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span>handlerWrapper<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> sentryPlugin<span class="token punctuation">;</span>\n</code></pre>\n<p>In your lambda ....</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">import</span> lambcycle <span class="token keyword">from</span> <span class="token string">\'lambcycle\'</span>\n<span class="token keyword">import</span> sentryPlugin <span class="token keyword">from</span> <span class="token string">\'./sentryPlugin\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">myApplicationLogic</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">someLogic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">lambcycle</span><span class="token punctuation">(</span>myApplicationLogic<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token function">sentryPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        key<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_KEY</span><span class="token punctuation">,</span>\n        project<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">SENTRY_PROJECT</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> handler<span class="token punctuation">;</span>\n</code></pre>\n<h1>DX</h1>\n<p>Lambcycle has been built with <a href="https://hackernoon.com/the-best-practices-for-a-great-developer-experience-dx-9036834382b0">developer experience &quot;DX&quot;</a> in mind and ships with <a href="https://www.typescriptlang.org">type</a> definitions, for consistency and auto-completion üöÄ (VScode only).</p>\n<p><img src="https://user-images.githubusercontent.com/4896851/51274743-db4db500-19c7-11e9-903c-cb50d127d933.gif" alt="">\n<em>Lambcycle DX.</em></p>\n<h1>Conclusion</h1>\n<p>It is a brave new world and serverless is here to stay! Promoting reusable components and consistent error handling will help you and your team create and support features in an more controlled and organised fashion. Lambcycle\'s main goals are to shift the conversation around a predictable unidirectional cycle and encouraging component reusability across features. Its worth mentioning that for more complex scenarios you should be looking at <a href="https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html">Step functions</a>. Let me know if you would like to know more about them in the comments, in the meantime check out these <a href="https://aws.amazon.com/step-functions/use-cases/">use cases</a>!</p>\n<p>Special thanks to the legendary <a href="https://theburningmonk.com/">burning monk</a> for the in-depth review of this article.</p>\n'
};

const BlogPage = () => {
    return (
        <Body>
            <Header />
            <BlogPost {...blogPostProps} />
            <Footer />
        </Body>
    );
};

export default withRouter(BlogPage);
